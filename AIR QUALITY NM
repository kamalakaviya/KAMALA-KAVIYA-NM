# Air Quality Prediction Dashboard (Optimized Version)
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.metrics import mean_squared_error, r2_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Page configuration
st.set_page_config(
    page_title="🌫️ Air Quality Prediction Dashboard",
    page_icon="🌍",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
    <style>
    .main { background-color: #f8f9fa; }
    .stButton>button { background-color: #4CAF50; color: white; }
    .stSelectbox>div>div>select { background-color: #e9f7ef; }
    .css-1aumxhk { background-color: #e9f7ef; }
    </style>
    """, unsafe_allow_html=True)

@st.cache_data(show_spinner=True)
def load_data(uploaded_file):
    try:
        df = pd.read_csv(uploaded_file, sep=';', low_memory=False)
        df = df.drop(columns=["Unnamed: 15", "Unnamed: 16"], errors='ignore')

        for col in df.columns:
            if col not in ["Date", "Time"]:
                df[col] = df[col].astype(str).str.replace(',', '.', regex=False)
                df[col] = pd.to_numeric(df[col], errors='coerce')

        df.replace(-200, np.nan, inplace=True)
        df.dropna(inplace=True)

        try:
            df['DateTime'] = pd.to_datetime(df['Date'] + ' ' + df['Time'], format='%d/%m/%Y %H.%M.%S')
        except ValueError:
            try:
                df['DateTime'] = pd.to_datetime(df['Date'] + ' ' + df['Time'], format='%m/%d/%Y %H.%M.%S')
            except ValueError:
                st.warning("Automatic datetime parsing used")
                df['DateTime'] = pd.to_datetime(df['Date'] + ' ' + df['Time'], errors='coerce')
                df.dropna(subset=['DateTime'], inplace=True)

        return df
    except Exception as e:
        st.error(f"Error loading data: {str(e)}")
        return None

def model_hyperparameters():
    st.sidebar.subheader("🔧 Model Parameters")
    n_estimators = st.sidebar.slider("Number of trees", 10, 200, 100, 10)
    max_depth = st.sidebar.slider("Max depth", 2, 20, 10, 1)
    return n_estimators, max_depth

def get_feature_target(df, target_col):
    X = df.drop(columns=["Date", "Time", "DateTime", target_col], errors='ignore')
    y = df[target_col]
    return X, y

def show_data_summary(df):
    st.subheader("📊 Data Overview")
    col1, col2 = st.columns(2)
    with col1:
        st.write("*Dataset Shape:*", df.shape)
        st.write("*Columns:*", list(df.columns))
    with col2:
        st.write("*Missing Values:*")
        st.write(df.isnull().sum())

    st.subheader("📈 Data Statistics")
    st.write(df.describe())

    st.subheader("⏳ CO(GT) Over Time")
    fig, ax = plt.subplots(figsize=(12, 4))
    df.set_index('DateTime')['CO(GT)'].plot(ax=ax)
    plt.title("CO Levels Over Time")
    st.pyplot(fig)

    st.subheader("🔥 Correlation Heatmap")
    numeric_cols = df.select_dtypes(include=[np.number]).columns
    fig, ax = plt.subplots(figsize=(10, 8))
    sns.heatmap(df[numeric_cols].corr(), annot=True, cmap='coolwarm', ax=ax)
    st.pyplot(fig)

def regression_model(df):
    st.subheader("🔢 Regression Model: Predict CO(GT)")
    n_estimators, max_depth = model_hyperparameters()
    X, y = get_feature_target(df, "CO(GT)")

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor(n_estimators=n_estimators, max_depth=max_depth, random_state=42)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    col1, col2 = st.columns(2)
    with col1:
        st.metric("Mean Squared Error", f"{mse:.4f}")
    with col2:
        st.metric("R² Score", f"{r2:.4f}")

    st.subheader("📊 Feature Importance")
    importance = pd.Series(model.feature_importances_, index=X.columns).sort_values()
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(x=importance.values, y=importance.index, palette="viridis", ax=ax)
    st.pyplot(fig)

    st.subheader("🔄 Actual vs Predicted Values")
    fig, ax = plt.subplots(figsize=(8, 6))
    sns.scatterplot(x=y_test, y=y_pred, alpha=0.6, ax=ax)
    plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
    plt.xlabel("Actual")
    plt.ylabel("Predicted")
    st.pyplot(fig)

def classification_model(df):
    st.subheader("🏷️ Classification Model: Air Quality Labels")
    n_estimators, max_depth = model_hyperparameters()

    def label_air_quality(co):
        if co <= 2:
            return 'Good'
        elif co <= 5:
            return 'Moderate'
        else:
            return 'Bad'

    df['AirQuality'] = df['CO(GT)'].apply(label_air_quality)
    st.write("*Class Distribution:*")
    dist = df['AirQuality'].value_counts(normalize=True)
    st.write(dist)

    fig, ax = plt.subplots(figsize=(6, 4))
    dist.plot(kind='bar', color=['green', 'orange', 'red'], ax=ax)
    plt.title("Air Quality Class Distribution")
    st.pyplot(fig)

    X, y = get_feature_target(df, "AirQuality")
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

    model = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth, random_state=42, class_weight='balanced')
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    st.subheader("📝 Classification Report")
    st.table(pd.DataFrame(classification_report(y_test, y_pred, output_dict=True)).transpose())

    st.subheader("🔄 Confusion Matrix")
    cm = confusion_matrix(y_test, y_pred, labels=['Good', 'Moderate', 'Bad'])
    fig, ax = plt.subplots(figsize=(8, 6))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Good', 'Moderate', 'Bad'], yticklabels=['Good', 'Moderate', 'Bad'], ax=ax)
    ax.set_xlabel("Predicted")
    ax.set_ylabel("Actual")
    st.pyplot(fig)

def main():
    st.title("🌫️ Air Quality Prediction Dashboard")

    with st.expander("ℹ️ How to use this dashboard"):
        st.write("""
        1. Upload your AirQuality.csv file (semicolon-separated)
        2. Select the model type
        3. Adjust model parameters
        4. View the results and download cleaned data
        """)
        sample = """Date;Time;CO(GT);PT08.S1(CO);NMHC(GT);C6H6(GT);PT08.S2(NMHC);NOx(GT);PT08.S3(NOx);NO2(GT);PT08.S4(NO2);PT08.S5(O3);T;RH;AH\n01/01/2004;12.00.00;2,6;1360;150;11,9;1046;166;1056;113;1692;1268;13,6;48,9;0,7578"""
        st.download_button("Download sample data format", data=sample.encode('utf-8'), file_name="AirQuality_sample.csv", mime="text/csv")

    uploaded_file = st.file_uploader("Upload your AirQuality.csv file", type=["csv"])

    if uploaded_file:
        df = load_data(uploaded_file)
        if df is not None:
            mode = st.sidebar.selectbox("Choose a model type", ["Data Exploration", "Regression (Predict CO)", "Classification (Air Quality)"])
            if mode == "Data Exploration":
                show_data_summary(df)
            elif mode == "Regression (Predict CO)":
                regression_model(df)
            elif mode == "Classification (Air Quality)":
                classification_model(df)

            csv = df.to_csv(index=False, sep=';').encode('utf-8')
            st.sidebar.download_button("Download Cleaned Data", data=csv, file_name='cleaned_air_quality.csv', mime='text/csv')

if _name_ == "_main_":
    main()
